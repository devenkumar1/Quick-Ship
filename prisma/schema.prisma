generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String?
  name        String
  role        Role      @default(USER)
  provider    String?
  providerId  String?   
  orders      Order[]
  reviews     Review[]
  seller      Seller? 
  phoneNumber String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

enum Role {
  USER
  ADMIN
  SELLER
}

model Seller {
  id       Int      @id @default(autoincrement())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  shop     Shop?
}

model Shop {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  logo        String?
  sellerId    Int       @unique
  seller      Seller    @relation(fields: [sellerId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal
  shopId      Int
  shop        Shop      @relation(fields: [shopId], references: [id])
  images      String[]  @default([])
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Order {
  id            Int           @id @default(autoincrement())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalAmount   Decimal
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  payment       Payment?
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int          @unique
  order     Order        @relation(fields: [orderId], references: [id])
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Review {
  id          Int       @id @default(autoincrement())
  text        String
  rating      Int
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  createdAt   DateTime  @default(now())
}

model PendingRequest {
  id          Int           @id @default(autoincrement())
  email       String 
  accountType Role          @default(SELLER)
  ReqStatus   PaymentStatus @default(PENDING) 
  contact     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
}